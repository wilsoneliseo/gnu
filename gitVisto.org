* Configuracion de usuario
  - git config --global user.name "miNombre" :: configura el nombre
  - git config --global user.correo "miCorreo" :: configura el correo
  - git config --global color.ui true :: activa la configuracion de colores
  - git config --global --list :: muestra las configuraciones hechas a
       este usuario
* Local
  - git init :: iniciar proyecto, que git empiece a monitoriar los
                cambios de la carpeta actual, es decir crea el
                repositorio
  - git status :: estado del proyecto, muestra que archivos estan y no
                  estan agregados al repositorio
  - git add archivo :: agregar "archivo" al repositorio
  - git add -A :: agregar todos los archivos
  - git add -u :: actualiza los archivos modificados. Esto para el
                  proximo commit
  - git add -i :: muestra un modo interactivo del comando add. El
                  comando add puede actualizar archivos o agregar
                  nuevos.
  - git commit -m "este es el inicio" :: confirmar los cambios
       agregando un mensaje
  - git remote add origin https://github.com/wilsoneliseo/insertar.git :: 
       agregar conexion al servidor de este repositorio en linea.
  - git remote rm origin :: eliminar conexion
  - git remote -v :: ver los repositorios remotos.
  - git push -u origin master :: enviar los archivos locales al
       repositorio en linea.
  - git log :: mostrar los commits creados
  - git rm grit.tex :: elimina y deja de darle seguimiento al archivo
       grit.tex
  - git help <comando> :: obtener documentacion para <comando>
  - git branch :: ver las ramas locales
  - git branch -a :: ver las ramas locales y remotas

* Deshacer commits locales
Se han probado en forma local con exito, pero al momento de hacer el
push hacia github ha sido rechazado.

  - git reset --soft <codigoHash> :: Deshace todos los commmits hechos
       despues de <codigoHash>, preservando los cambios locales.
       tocar el codigo
  - git reset --hard <codigoHash> :: Deshace todos los commmits hechos
       despues de <codigoHash> y tambien deshace los cambios.
  - git reset --hard HEAD~1 :: regresa al penultimo commit y borra el
       actual con todo y cambios (probado con exito).

* Borrar commit remoto
Borrar un commit en forma local es bastante sencillo, el problema es
que con esto vamos a reescribir la historia y despues no vamos a poder
pusheando a origin master.

Para asegurarnos un poco vamos hacerlo en una rama diferente.

Esta [[https://www.youtube.com/watch?v%3DmdZvYyIKURo][historia]] cuenta de como borrar un commit de forma remota, cuando
utilizamos el servicio de github.

*IMPORTANTE* tanto el repositorio local como el remoto deben estar
sincronizados (iguales) al momento de realizar los pasos.

Estos son los commits del repositorio de ejemplo en la rama master.
#+BEGIN_EXAMPLE
8b66629 Test directories (HEAD, origin/master, origin/HEAD, master) [Pepe Doval]
d785853 Setu errors ignored [Pepe Doval] 
bffd2e3 We want to delete this commit [John Smith]
83e4b43 Sample setUp() [Pepe Doval]
e9f839a Fix bug: wrong params order in assertGreaterThan [Pepe Doval]
fc60f4f First prototype [Pepe Doval]
#+END_EXAMPLE
Explicando la primera línea: 8b66629 es el codigo hash del
commit. ~Test directories~ la descripcion del commit.

El que se va ha eliminar es el comit con codigo hash bffd2e3.

** Pasos
*** Ver todos los branch, locales y remotos. (opcional)
#+BEGIN_EXAMPLE
$ git branch -a
#+END_EXAMPLE

*** Crear una nueva rama (y cambiarse hacia el) a partir del
   commit(83e4b43) del cual los commits posteriores queremos eliminar.
#+BEGIN_EXAMPLE
$ git checkout 83e4b43 -b nueva_historia
#+END_EXAMPLE

con esto ya tenemos una rama que incluyen los commits desde el primero
hasta el 83e4b43.

*** Apilar los commits del la rama master, sobre la nueva rama creada
   (~nueva_historia~)
#+BEGIN_EXAMPLE
$ git cherry-pick d785853
$ git cherry-pick master
#+END_EXAMPLE
En la segunda linea se puede colocar ~master~, en vez de 8b66629, para
referirse al commit porque se trata del ultimo realizado. Ahorita en
esta rama ~nueva_historia~ ya tenemos la historia que queriamos:
#+BEGIN_EXAMPLE
$ git log
8b66629 Test directories (HEAD, origin/master, origin/HEAD, master) [Pepe Doval]
d785853 Setu errors ignored [Pepe Doval] 
83e4b43 Sample setUp() [Pepe Doval]
e9f839a Fix bug: wrong params order in assertGreaterThan [Pepe Doval]
fc60f4f First prototype [Pepe Doval]
$ git log master
8b66629 Test directories (HEAD, origin/master, origin/HEAD, master) [Pepe Doval]
d785853 Setu errors ignored [Pepe Doval] 
bffd2e3 We want to delete this commit [John Smith]
83e4b43 Sample setUp() [Pepe Doval]
e9f839a Fix bug: wrong params order in assertGreaterThan [Pepe Doval]
fc60f4f First prototype [Pepe Doval]
#+END_EXAMPLE
porque no esta el commit que queremos eliminar (bffd2e3)

*** pushear a origin esta nueva historia
#+BEGIN_EXAMPLE
$ git push origin nueva_historia
#+END_EXAMPLE
para ver las ramas locales y remotas puede hacer =$ git branch -a=

*** Ahora ha borrar la rama master en remoto (github), esto se hace
   anteponiendo dos puntos al nombre de la rama
#+BEGIN_EXAMPLE
$ git push origin :master
#+END_EXAMPLE
Si hacemos este comando, sin más, nos da error porque antes hay que
cambiar la rama por default establecida en el portal de github. Para
hacer esto vayase al repositorio en github y el la parte superior, en
"Settings" escojer "Branches" en el panel izquierdo. Luego cambiamos
la pestaña master por nueva_historia. Luego en "Update".

Ahora si ya podemos borrar master
#+BEGIN_EXAMPLE
$ git push origin :master
#+END_EXAMPLE
Con esto tenemos en local y remoto unicamente la rama ~nueva_historia~
y tendríamos lo que queríamos con el pequeño detalle de que la rama no
se llama ~master~. Si en verdad queremos cambiarle el nombre repetimos
el mismo proceso hecho hasta este punto, es decir, crear una nueva
rama local llamada ~master~, pushearlo, luego cambiar la rama por
defecto en github y por ultimo eliminar la rama ~nueva_historia~.
